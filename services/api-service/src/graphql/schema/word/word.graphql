enum WordStatus {
  ACTIVE
  INACTIVE
}

type Definition {
  definition: String!
  example: String
}

type Meaning {
  partOfSpeech: String!
  definitions: [Definition!]!
  synonyms: [String!]
  antonyms: [String!]
}

type Phonetic {
  text: String!
  audio: String!
}

type Word {
  wordId: ID!
  word: String!
  isFavorite: Boolean!
  status: WordStatus!
  phonetics: [Phonetic!]!
  meanings: [Meaning!]!
}

input WordsInput {
  isFavorite: Boolean
  page: PositiveInt
  limit: PositiveInt
}

input CreateWordInput {
  word: String!
  isFavorite: Boolean
}

input UpdateWordInput {
  wordId: ID!
  word: String
  isFavorite: Boolean
}

extend type Query {
  word(wordId: ID!): Word!
  words(input: WordsInput): [Word!]!
}

type WordMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  word: Word!
}

extend type Mutation {
  createWord(input: CreateWordInput!): WordMutationResponse!
  updateWord(input: UpdateWordInput!): WordMutationResponse!
  deleteWord(wordId: ID!): MutationResponse!
}
